{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/ryancroke/projects/northshorerunclub/src/app/api/weather/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Cache the weather forecast for 1 hour\nexport const revalidate = 3600;\n\nexport async function GET() {\n    try {\n        // Define headers required by the Weather.gov API\n        const headers = {\n            'User-Agent': '(northshorerunclub.com, contact@northshorerunclub.com)',\n            'Accept': 'application/geo+json'\n        };\n\n        // Step 1: Get the grid forecast endpoint for Shorewood, WI\n        const pointsResponse = await fetch('https://api.weather.gov/points/43.0892,-87.8876', {\n            headers,\n            next: { revalidate: 86400 } // Cache for 24 hours\n        });\n\n        if (!pointsResponse.ok) {\n            throw new Error(`Failed to get points data: ${pointsResponse.statusText}`);\n        }\n\n        const pointsData = await pointsResponse.json();\n        const forecastUrl = pointsData.properties.forecast;\n\n        // Step 2: Get the forecast data from the endpoint\n        const forecastResponse = await fetch(forecastUrl, {\n            headers,\n            next: { revalidate: 3600 } // Cache for 1 hour\n        });\n\n        if (!forecastResponse.ok) {\n            throw new Error(`Failed to get forecast data: ${forecastResponse.statusText}`);\n        }\n\n        const forecastData = await forecastResponse.json();\n        const periods = forecastData.properties.periods;\n\n        // Step 3: Find the forecast for the next Wednesday at 6 PM\n        const today = new Date();\n        let nextWednesday = new Date();\n        nextWednesday.setDate(today.getDate() + ((3 + 7 - today.getDay()) % 7)); // Find next Wednesday (3 is Wednesday)\n        nextWednesday.setHours(18, 0, 0, 0); // Set time to 6 PM\n\n        // Step 4: Find the appropriate forecast period\n        // Using the same logic as the original implementation\n        let forecastPeriod = periods.find(period => {\n            const periodStart = new Date(period.startTime);\n            return periodStart.getDay() === nextWednesday.getDay() &&\n                periodStart.getHours() >= 12; // Find Wednesday evening\n        });\n\n        // If we didn't find an evening period on Wednesday, just use the first period\n        if (!forecastPeriod && periods.length > 0) {\n            forecastPeriod = periods[0];\n        }\n\n        if (!forecastPeriod) {\n            return NextResponse.json(\n                { error: 'Forecast data not available' },\n                { status: 404 }\n            );\n        }\n\n        // Return just the data we need\n        return NextResponse.json({\n            temperature: forecastPeriod.temperature,\n            temperatureUnit: forecastPeriod.temperatureUnit,\n            shortForecast: forecastPeriod.shortForecast,\n            icon: forecastPeriod.icon,\n            startTime: forecastPeriod.startTime,\n            endTime: forecastPeriod.endTime,\n        });\n    } catch (error) {\n        console.error('Error fetching the weather data:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch weather data' },\n            { status: 500 }\n        );\n    }\n} "],"names":[],"mappings":";;;;AAAA;;AAGO,MAAM,aAAa;AAEnB,eAAe;IAClB,IAAI;QACA,iDAAiD;QACjD,MAAM,UAAU;YACZ,cAAc;YACd,UAAU;QACd;QAEA,2DAA2D;QAC3D,MAAM,iBAAiB,MAAM,MAAM,mDAAmD;YAClF;YACA,MAAM;gBAAE,YAAY;YAAM,EAAE,qBAAqB;QACrD;QAEA,IAAI,CAAC,eAAe,EAAE,EAAE;YACpB,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,eAAe,UAAU,EAAE;QAC7E;QAEA,MAAM,aAAa,MAAM,eAAe,IAAI;QAC5C,MAAM,cAAc,WAAW,UAAU,CAAC,QAAQ;QAElD,kDAAkD;QAClD,MAAM,mBAAmB,MAAM,MAAM,aAAa;YAC9C;YACA,MAAM;gBAAE,YAAY;YAAK,EAAE,mBAAmB;QAClD;QAEA,IAAI,CAAC,iBAAiB,EAAE,EAAE;YACtB,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,iBAAiB,UAAU,EAAE;QACjF;QAEA,MAAM,eAAe,MAAM,iBAAiB,IAAI;QAChD,MAAM,UAAU,aAAa,UAAU,CAAC,OAAO;QAE/C,2DAA2D;QAC3D,MAAM,QAAQ,IAAI;QAClB,IAAI,gBAAgB,IAAI;QACxB,cAAc,OAAO,CAAC,MAAM,OAAO,KAAM,CAAC,IAAI,IAAI,MAAM,MAAM,EAAE,IAAI,IAAK,uCAAuC;QAChH,cAAc,QAAQ,CAAC,IAAI,GAAG,GAAG,IAAI,mBAAmB;QAExD,+CAA+C;QAC/C,sDAAsD;QACtD,IAAI,iBAAiB,QAAQ,IAAI,CAAC,CAAA;YAC9B,MAAM,cAAc,IAAI,KAAK,OAAO,SAAS;YAC7C,OAAO,YAAY,MAAM,OAAO,cAAc,MAAM,MAChD,YAAY,QAAQ,MAAM,IAAI,yBAAyB;QAC/D;QAEA,8EAA8E;QAC9E,IAAI,CAAC,kBAAkB,QAAQ,MAAM,GAAG,GAAG;YACvC,iBAAiB,OAAO,CAAC,EAAE;QAC/B;QAEA,IAAI,CAAC,gBAAgB;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAEtB;QAEA,+BAA+B;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,aAAa,eAAe,WAAW;YACvC,iBAAiB,eAAe,eAAe;YAC/C,eAAe,eAAe,aAAa;YAC3C,MAAM,eAAe,IAAI;YACzB,WAAW,eAAe,SAAS;YACnC,SAAS,eAAe,OAAO;QACnC;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}